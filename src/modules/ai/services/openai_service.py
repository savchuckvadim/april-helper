import os
from langchain_openai import OpenAIEmbeddings, ChatOpenAI
from dotenv import load_dotenv
from src.api.http.exceptions import AppException
from src.modules.ai.model.base_llm import LLMBase
from src.modules.ai.utils.langchain_helpers import extract_result


class OpenAIService:
    def __init__(self, model_name:str):
        load_dotenv()
        self.model_name = model_name
        self.api_key = os.getenv("OPENAI_API_KEY")
        if not self.api_key:
            raise ValueError("‚ùå Missing GIGACHAT_API_KEY")
        self.llm = ChatOpenAI(model="gpt-3.5-turbo", openai_api_key=self.api_key)

        self.embeddings = OpenAIEmbeddings(openai_api_key=self.api_key)
    async def resume(self, query: str):
        try:
            retriever = LLMBase.build_resume_chain(self.embeddings, self.model_name)
            chain = LLMBase.build_chain(
                llm=self.llm,
                retriever=retriever,
                with_history=False,
            )
            result = chain.invoke({
                "input": query,
                "context": ""
            })

   
            return extract_result(result)
        except Exception as e:
            print(f"‚ùå Open AI recommendation error: {e}")
            raise AppException(status_code=500, detail=str(e))
    async def recomendation(self, query: str):
        try:
            # üß† 1. –ü–æ–ª—É—á–∞–µ–º retriever
            retriever = LLMBase.get_retriver(self.embeddings, self.model_name)
            chain = LLMBase.build_chain(
                llm=self.llm,
                retriever=retriever,
                with_history=False,
            )
            result = chain.invoke({
                "input": query,
                "context": ""
            })

   
            return extract_result(result)

        except Exception as e:
            print(f"‚ùå Open AI recommendation error: {e}")
            raise AppException(status_code=500, detail=str(e))


    # async def resume(query: str):
    #     load_dotenv()
    #     OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

    #     if not OPENAI_API_KEY:
    #         return JSONResponse({"error": "Missing OPENAI_API_KEY"}, status_code=500)

    #     try:
    #         # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ LLM
    #         llm = ChatOpenAI(model="gpt-3.5-turbo", openai_api_key=OPENAI_API_KEY)

    #         # –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ
    #         prompt = ChatPromptTemplate.from_messages(
    #             [
    #                 (
    #                     "system",
    #                     "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–æ–≤. "
    #                     "–í—Å–µ–≥–¥–∞ –ø–∏—à–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞. –û—Ç –ª–∏—Ü–∞ –ú–µ–Ω–µ–¥–∂–µ—Ä–∞. (–ø—Ä–µ–¥–ª–æ–∂–∏–ª,–ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞, –ø—Ä–æ–≤–µ–ª –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é, –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∞ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ)"
    #                     "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. "
    #                     "–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ì–∞—Ä–∞–Ω—Ç"
    #                     "–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –ø–∏—à–µ—Ç—Å—è –∫–∞–∫-—Ç–æ –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ —Å–æ–∑–≤—É—á–Ω–æ –∏—Å–ø—Ä–∞–≤—å –Ω–∞  –ì–ê–†–ê–ù–¢"
    #                     "–†–µ–∑—é–º–∏—Ä—É—è —Ç–µ–∫—Å—Ç –ø–∏—à–∏ –æ—Ç —Å–≤–æ–µ–≥–æ –ª–∏—Ü–∞, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –ú–µ–Ω–µ–¥–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Ç–∏–ø–∞ –ü–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å.. –ü—Ä–æ–≤–µ–ª –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é.. –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ"
    #                     "–ù–∞–ø–∏—à–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä, –∫–∞–∫ –æ–Ω –∏—Ö –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –∏ –ø–æ—á–µ–º—É –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –º–æ–º–µ–Ω—Ç –±—ã–ª"
    #                     "–¢–∞–∫–∂–µ –Ω–∞–ø–∏—à–∏ –∫–∞–∫–∏–µ —Ç–µ–ø–µ—Ä—å –ø–ª–∞–Ω—ã —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —á—Ç–æ–±—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∏ –ø—Ä–æ–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç"
    #                     "–ü–∏—à–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –æ–ø–∏—Å—ã–≤–∞—è –Ω—é–∞–Ω—Å—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"
    #                     "–ü–∏—à–∏ –∫–∞–∫–∏–µ —É—Å–ø–µ—à–Ω—ã–µ –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º, —á—Ç–æ –æ–Ω —Å–¥–µ–ª–∞–ª –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞."
    #                     "–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª–∏ —Ç–æ–º—É –æ–±—â–∞–ª—Å—è –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å –ª–∏—Ü–æ–º –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–º —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç"
    #                     "–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî –ì–∞—Ä–∞–Ω—Ç. –í —Ç–µ–∫—Å—Ç–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. –ò—Å–ø—Ä–∞–≤—å –∏—Ö –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å"
    #                     "–û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –ï—Å–ª–∏ –±—ã–ª–∏ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî —É–ø–æ–º—è–Ω–∏ –∏—Ö. "
    #                     "–¢–∞–∫–∂–µ –æ—Ç–º–µ—Ç—å, –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å –ª–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: –Ω–∞–ø–∏—à–∏ '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: –ø—Ä–æ–≤–µ–¥–µ–Ω–∞' –∏–ª–∏ '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞'."
    #                     "–í—Å–µ–≥–¥–∞ –ø–∏—à–∏ –±—ã–ª –ª–∏ –∑–≤–æ–Ω–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –ó–≤–æ–Ω–æ–∫: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π –∏–ª–∏ –ó–≤–æ–Ω–æ–∫: –ù–µ—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π",
    #                 ),
    #                 ("human", "{input}"),
    #             ]
    #         )

    #         # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏
    #         formatted_prompt = prompt.format(input=query)
    #         result = llm.predict(formatted_prompt)

    #         return result

    #     except Exception as e:
    #         print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    #         return JSONResponse({"error": str(e)}, status_code=500)

    # async def recomendation(query: str):
    #     load_dotenv()
    #     OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

    #     if not OPENAI_API_KEY:
    #         return JSONResponse({"error": "Missing OPENAI_API_KEY"}, status_code=500)

    #     try:
    #         # üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LLM
    #         embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)
    #         llm = ChatOpenAI(model="gpt-3.5-turbo", openai_api_key=OPENAI_API_KEY)

    #         # üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º PDF
    #         file_path = os.path.abspath("retrive_data/data.pdf")
    #         print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {file_path}")

    #         # üì• –ß–∏—Ç–∞–µ–º PDF
    #         def extract_text_from_pdf(pdf_path):
    #             text = ""
    #             with fitz.open(pdf_path) as doc:
    #                 for page in doc:
    #                     text += page.get_text("text") + "\n"
    #             return text

    #         pdf_text = extract_text_from_pdf(file_path)

    #         # üîπ –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
    #         text_splitter = RecursiveCharacterTextSplitter(
    #             chunk_size=1000, chunk_overlap=200
    #         )
    #         splits = text_splitter.create_documents([pdf_text])

    #         # üîπ –°–æ–∑–¥–∞—ë–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    #         vectorstore = Chroma.from_documents(documents=splits, embedding=embeddings)
    #         retriever = vectorstore.as_retriever(
    #             search_kwargs={"k": 2}
    #         )  # –ü–æ–ª—É—á–∞–µ–º 2 –±–ª–∏–∂–∞–π—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞

    #         # üîπ –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    #         recommendation_prompt = ChatPromptTemplate.from_messages(
    #             [
    #                 (
    #                     "system",
    #                     "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∑–≤–æ–Ω–∫–æ–≤ –∏ –ø—Ä–æ–¥–∞–∂–∞–º –ò–ü–û –ì–ê–†–ê–ù–¢. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n{context}\n\n"
    #                     "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π, –∫–∞–∫–∏–µ –æ—à–∏–±–∫–∏ –¥–æ–ø—É—Å—Ç–∏–ª –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –ª—É—á—à–µ.",
    #                 ),
    #                 MessagesPlaceholder("chat_history"),
    #                 ("human", "{input}"),
    #             ]
    #         )

    #         # üîπ –°–æ–∑–¥–∞—ë–º —Ü–µ–ø–æ—á–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    #         document_chain = create_stuff_documents_chain(llm, recommendation_prompt)
    #         retrieval_chain = create_retrieval_chain(retriever, document_chain)

    #         # üîπ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ (–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∏–∑ –±–∞–∑—ã, –Ω–æ –ø–æ–∫–∞ –ø—É—Å—Ç–∞—è)
    #         chat_history = []

    #         # üîπ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    #         result = retrieval_chain.invoke(
    #             {"input": query, "chat_history": chat_history}
    #         )

    #         return result["answer"]

    #     except Exception as e:
    #         print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    #         return ""
